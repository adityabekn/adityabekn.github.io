---
import type { CollectionEntry } from 'astro:content'
import { getShortDate } from '@/utils/date'

interface Props {
  posts: CollectionEntry<'posts'>[]
}

type YearlyPostGroup = {
  year: number
  posts: CollectionEntry<'posts'>[]
}

const { posts } = Astro.props

function groupPostsByYearlyGroups(posts: CollectionEntry<'posts'>[]): YearlyPostGroup[] {
  return posts.reduce<YearlyPostGroup[]>((groupedPosts, post) => {
    const year = post.data.date.getFullYear()
    const last_group = groupedPosts[groupedPosts.length - 1]

    if (last_group && last_group.year === year) {
      last_group.posts.push(post)
    } else {
      groupedPosts.push({ year, posts: [post] })
    }

    return groupedPosts
  }, [])
}

const grouped_posts = groupPostsByYearlyGroups(posts)
---

<section>
  {
    grouped_posts.map((group_year) => (
      <div class="relative py-10">
        <h3
          class="absolute -top-3 -left-8 text-[7rem] text-transparent leading-none font-bold pointer-events-none select-none font-['Atkinson']"
          style="-webkit-text-stroke: 2px rgb(var(--color-text-primary) / 0.1);"
        >
          {group_year.year}
        </h3>
        <ul class="space-y-4">
          {group_year.posts.map((post) => (
            <li class="flex items-baseline space-x-2">
              <span class="shrink-0 text-gray-600 dark:text-gray-300 text-sm">
                {getShortDate(post.data.date)}
              </span>
              <a
                class="hover:text-accent/80 hover:underline underline-offset-2"
                href={`/posts/${post.slug}`}
              >
                {post.data.title}
              </a>
              {post.data.sticky > 0 && <i class="iconfont icon-pushpin text-red-500" />}
            </li>
          ))}
        </ul>
      </div>
    ))
  }
</section>
