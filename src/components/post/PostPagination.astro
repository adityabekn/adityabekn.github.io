---
interface Props {
  current: number
  total: number
  getPageUrl: (page: number) => string
}

type ButtonItem = {
  isButton: boolean;
  page?: number;
  icon?: string;
  label?: string;
};

const { current, total, getPageUrl } = Astro.props

// Explicitly typed `items` array
const items: ButtonItem[] = [];
if (current > 1) {
  items.push({ isButton: true, page: current - 1, icon: 'left', label: 'Previous Page' });
  if (current > 2) items.push({ isButton: false, icon: 'more' }); // More (ellipsis) before current
}

items.push({ isButton: false, page: current }); // Current page item

if (current < total) {
  if (current < total - 1) items.push({ isButton: false, icon: 'more' }); // More (ellipsis) after current
  items.push({ isButton: true, page: current + 1, icon: 'right', label: 'Next Page' });
}
---

<div class="mt-12 flex items-center justify-center gap-2">
  {
    items.map((item) => {
      if (item.isButton) {
        return (
          <a
            class="size-8 rounded-lg flex items-center justify-center transition-bg-color duration-200  hover:bg-accent/20 select-none"
            href={getPageUrl(item.page!)}
            aria-label={item.label}
          >
            {item.icon ? <i class={`iconfont icon-${item.icon}`} /> : item.page}
          </a>
        )
      } else {
        return (
          <span
            class="size-8 rounded-lg flex items-center justify-center cursor-default select-none"
            class:list={[{ 'text-white bg-accent dark:text-black': item.page === current }]}
          >
            {item.icon ? <i class={`iconfont icon-${item.icon}`} /> : item.page}
          </span>
        )
      }
    })
  }
</div>
